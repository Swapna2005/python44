# 1. Write a program to define a function that can accept an integer number as    input and print the "It is an even number" if the number is even, otherwise print "It is odd".

# num = int(input("Enter a number: "))
# mod = num % 2
# if mod > 0:
#     print("This is an odd number.")
# else:
#     print("This is an even number.")


# 2. Write a program to define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.

# d=dict()
# for x in range(1,21):
#     d[x]=x**2
# print(d) 

# 3. Write a program to take a string as input and return a string with vowels removed.(implement List Comprehesion)


# string = "swapna"

# vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
# result = ""

# for i in range(len(string)):
#     if string[i] not in vowels:
#         result = result + string[i]

# print("\nAfter removing Vowels: ", result)

# 4. Write a program to display Powers of 2  using Anonymous functions?(lambda,map).

# terms = 10

# result = list(map(lambda x: 2 ** x, range(terms)))

# print("The total terms are:",terms)
# for i in range(terms):
#    print("2 raised to power",i,"is",result[i])

# 5. Write a program to implement bubble-sort algorithm
 
# def bubbleSort(arr):
#     n = len(arr)
#     swapped = False
#     for i in range(n-1):
#         for j in range(0, n-i-1):
#             if arr[j] > arr[j + 1]:
#                 swapped = True
#                 arr[j], arr[j + 1] = arr[j + 1], arr[j]
#         if not swapped:
#             return
# arr = [64, 34, 25, 12, 22, 11, 90]
 
# bubbleSort(arr)
 
# print("Sorted array is:")
# for i in range(len(arr)):
#     print("% d" % arr[i], end=" ")

# 6. Write a program to implement binary-search algorithm

# import bisect
  
# def binary_search_bisect(arr, x):
#     i = bisect.bisect_left(arr, x)
#     if i != len(arr) and arr[i] == x:
#         return i
#     else:
#         return -1
  
  
# # Test array
# arr = [2, 3, 4, 10, 40]
# x = 10
  
# # Function call
# result = binary_search_bisect(arr, x)
  
# if result != -1:
#     print("Element is present at index", str(result))
# else:
#     print("Element is not present in array")

# 7. Write a program to take two list of same length as input and return a dictionary with one as keys and other as values


# test_keys = ["aadhya", "sneha", "chithra"]
# test_values = [1, 4, 5]
# print("Original key list is : " + str(test_keys))
# print("Original value list is : " + str(test_values))
# res = {}
# for key in test_keys:
#     for value in test_values:
#         res[key] = value
#         test_values.remove(value)
#         break
# print("Resultant dictionary is : " + str(res))



# 8. Write a program to print fibonocci series using recursion.


# def recur_fibo(n):
#    if n <= 1:
#        return n
#    else:
#        return(recur_fibo(n-1) + recur_fibo(n-2))

# nterms = 10
# if nterms <= 0:
#    print("Plese enter a positive integer")
# else:
#    print("Fibonacci sequence:")
#    for i in range(nterms):
#        print(recur_fibo(i))


# 9. Write a program to find the factorial of a number using recursion.


# def recur_factorial(n):
#    if n == 1:
#        return n
#    else:
#        return n*recur_factorial(n-1)

# num = 7
# if num < 0:num = int(input("Enter a number: "))
# mod = num % 2
# if mod > 0:
#     print("This is an odd number.")
# else:
#     print("This is an even number.")

#    print("Sorry, factorial does not exist for negative numbers")
# elif num == 0:
#    print("The factorial of 0 is 1")
# else:
#    print("The factorial of", num, "is", recur_factorial(num))



# 10. Program to implement concept of decorator to calculate the time needed to execute one or more function in a program.


# from time import time
# def timer_func(func):
#     def wrap_func(*args, **kwargs):
#         t1 = time()
#         result = func(*args, **kwargs)
#         t2 = time()
#         print(f'Function {func.__name__!r} executed in {(t2-t1):.4f}s')
#         return result
#     return wrap_func
# @timer_func
# def long_time(n):
#     for i in range(n):
#         for j in range(100000):
#             i*j
# long_time(5)




# 11. Write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.(implement generator).

# def Numgenerator(n):
#     for i in range(n+1):
#         if i%5==0 and i%7==0:
#             yield i
# n=int(input("enter number"))
# values=[]
# for i in Numgenerator(n):
#     values.append(str(i))
# print(",".join(values))




# 12. Write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.(implement generator)

# def my_generator(n):
#     value = 0
#     while value < n:
#         yield value
#         value += 1
# for value in my_generator(3):
#     print(value)


# 13. Write a program to implement Insertion-Sort algorithm in python.


# def insertionSort(arr):
#     n = len(arr)  
      
#     if n <= 1:
#         return 
 
#     for i in range(1, n):  
#         key = arr[i]  
#         j = i-1
#         while j >= 0 and key < arr[j]:  
#             arr[j+1] = arr[j]  
#             j -= 1
#         arr[j+1] = key  
# arr = [12, 11, 13, 5, 6]
# insertionSort(arr)
# print(arr)


# 14. Program to implement Linear-Search Algorithm.

# def linearsearch(arr, x):
#    for i in range(len(arr)):
#       if arr[i] == x:
#          return i
#    return -1
# arr = ['t','u','t','o','r','i','a','l']
# x = 'a'
# print("element found at index "+str(linearsearch(arr,x)))


# 15. Program to implement Selection-Sort Algorithm.


# def selectionSort(array, size):
    
#     for ind in range(size):
#         min_index = ind
 
#         for j in range(ind + 1, size):
#             if array[j] < array[min_index]:
#                 min_index = j
#         (array[ind], array[min_index]) = (array[min_index], array[ind])
 
# arr = [-2, 45, 0, 11, -9,88,-97,-202,747]
# size = len(arr)
# selectionSort(arr, size)
# print('The array after sorting in Ascending Order by selection sort is:')
# print(arr)


# 16. Write a Python program to find the second smallest number in a list using function.


# def find_len(list1):
#     length = len(list1)
#     list1.sort()
#     print("Largest element is:", list1[length-1])
#     print("Smallest element is:", list1[0])
#     print("Second Largest element is:", list1[length-2])
#     print("Second Smallest element is:", list1[1])
# list1=[12, 45, 2, 41, 31, 10, 8, 6, 4]
# Largest = find_len(list1)

















